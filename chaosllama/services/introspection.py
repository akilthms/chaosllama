import mlflow
from typing import List, Dict, Optional, Union
from abc import ABC
from mlflow.entities import SpanType, Feedback
from chaosllama.entities.models import AgentConfig, AgentInput, IntrospectionManager
import pandas as pd
from langchain.chat_models import ChatDatabricks
import chaosllama.prompts.registry as cll_prompts
import time
from dataclasses import asdict



@mlflow.trace
class IntrospectionWorkflow():
    def __init__(self, agent):
        self.agent = agent

    def run(self, data_intelligence: List[Feedback]) -> Dict:
        return self.agent.optimize(data_intelligence, mode="system_instructions")


class InstrospectiveAI(ABC):
    def __init__(self, agent_config: AgentConfig):
        self.agent_config = agent_config

    def instrospect(self, data_intellegence: pd.DataFrame):
        pass

    def optimize(self,
                 agent_input,
                 mode="system_instructions") -> Optional[Union[str, pd.DataFrame]]:
        pass


class IntrospectionAIAgent():
    """The purpose of this class is to inspect the data intelligence generated by mlflow.evaluate & lakehouse monitor to determine how to optimize the System prompt in One Shot
    """

    def __init__(self, agent_config: AgentConfig):
        self.agent_config = agent_config
        self.agent = None
        # self.ucmg = ucmg

    def create_agent(self):
        chat_model = ChatDatabricks(endpoint=self.agent_config.endpoint, **self.agent_config.llm_parameters)

        self.agent = (
                self.agent_config.system_prompt |
                chat_model |
                cll_prompts.introspection_parser
        )

        return self

    def retry_introspection(max_retries: int = 2, delay: int = 1):
        def decorator(func):
            def wrapper(*args, **kwargs):
                attempt = 0
                while attempt < max_retries:
                    try:
                        res = func(*args, **kwargs)
                        return res
                    except Exception as e:
                        print(
                            f"\t🧠❌ Introspection Attempt {attempt} failed with Exception: {e} attempting retry {max_retries - attempt} more times")
                        attempt += 1
                        if attempt < max_retries:
                            print("\t", f"Retrying in {delay} seconds...")
                            time.sleep(delay + attempt)  # Increasing back off
                        else:
                            print(f"😵 All {max_retries} attempts failed.")
                            return None
                    finally:
                        pass

            return wrapper

        return decorator

    @mlflow.trace(span_type=SpanType.TOOL)
    @retry_introspection()
    def introspect(self, inputs: AgentInput, instrmg: IntrospectionManager = None):
        if not self.agent:
            self.create_agent()

        updated_metadata: dict = self.agent.invoke(asdict(inputs))

        # TODO: Store metadata about introspection to DELTA tables
        return updated_metadata

    @mlflow.trace(span_type=SpanType.TOOL)
    def optimize(self, agent_input, mode="system_instructions"):
        match mode:
            case "system_instructions":
                self.introspect(agent_input)
            case "column_description":
                pass
            case _:
                raise ValueError("Invalid mode")

    def log_agent(self):
        """ The purpose of this method is to log the agent to mlflow"""
        pass


class DspyIntrospectionAgent():
    pass